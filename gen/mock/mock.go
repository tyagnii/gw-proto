// Code generated by MockGen. DO NOT EDIT.
// Source: gen/exchanger/v1/exchanger_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source gen/exchanger/v1/exchanger_grpc.pb.go -destination gen/mock/mock.go
//

// Package mock_exchanger is a generated GoMock package.
package mock_exchanger

import (
	context "context"
	reflect "reflect"

	v1 "github.com/tyagnii/gw-proto/gen/exchanger/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockExchangeServiceClient is a mock of ExchangeServiceClient interface.
type MockExchangeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceClientMockRecorder
}

// MockExchangeServiceClientMockRecorder is the mock recorder for MockExchangeServiceClient.
type MockExchangeServiceClientMockRecorder struct {
	mock *MockExchangeServiceClient
}

// NewMockExchangeServiceClient creates a new mock instance.
func NewMockExchangeServiceClient(ctrl *gomock.Controller) *MockExchangeServiceClient {
	mock := &MockExchangeServiceClient{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeServiceClient) EXPECT() *MockExchangeServiceClientMockRecorder {
	return m.recorder
}

// GetExchangeRateForCurrency mocks base method.
func (m *MockExchangeServiceClient) GetExchangeRateForCurrency(ctx context.Context, in *v1.CurrencyRequest, opts ...grpc.CallOption) (*v1.ExchangeRateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExchangeRateForCurrency", varargs...)
	ret0, _ := ret[0].(*v1.ExchangeRateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRateForCurrency indicates an expected call of GetExchangeRateForCurrency.
func (mr *MockExchangeServiceClientMockRecorder) GetExchangeRateForCurrency(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateForCurrency", reflect.TypeOf((*MockExchangeServiceClient)(nil).GetExchangeRateForCurrency), varargs...)
}

// GetExchangeRates mocks base method.
func (m *MockExchangeServiceClient) GetExchangeRates(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.ExchangeRatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExchangeRates", varargs...)
	ret0, _ := ret[0].(*v1.ExchangeRatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRates indicates an expected call of GetExchangeRates.
func (mr *MockExchangeServiceClientMockRecorder) GetExchangeRates(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRates", reflect.TypeOf((*MockExchangeServiceClient)(nil).GetExchangeRates), varargs...)
}

// MockExchangeServiceServer is a mock of ExchangeServiceServer interface.
type MockExchangeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceServerMockRecorder
}

// MockExchangeServiceServerMockRecorder is the mock recorder for MockExchangeServiceServer.
type MockExchangeServiceServerMockRecorder struct {
	mock *MockExchangeServiceServer
}

// NewMockExchangeServiceServer creates a new mock instance.
func NewMockExchangeServiceServer(ctrl *gomock.Controller) *MockExchangeServiceServer {
	mock := &MockExchangeServiceServer{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeServiceServer) EXPECT() *MockExchangeServiceServerMockRecorder {
	return m.recorder
}

// GetExchangeRateForCurrency mocks base method.
func (m *MockExchangeServiceServer) GetExchangeRateForCurrency(arg0 context.Context, arg1 *v1.CurrencyRequest) (*v1.ExchangeRateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateForCurrency", arg0, arg1)
	ret0, _ := ret[0].(*v1.ExchangeRateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRateForCurrency indicates an expected call of GetExchangeRateForCurrency.
func (mr *MockExchangeServiceServerMockRecorder) GetExchangeRateForCurrency(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateForCurrency", reflect.TypeOf((*MockExchangeServiceServer)(nil).GetExchangeRateForCurrency), arg0, arg1)
}

// GetExchangeRates mocks base method.
func (m *MockExchangeServiceServer) GetExchangeRates(arg0 context.Context, arg1 *v1.Empty) (*v1.ExchangeRatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRates", arg0, arg1)
	ret0, _ := ret[0].(*v1.ExchangeRatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRates indicates an expected call of GetExchangeRates.
func (mr *MockExchangeServiceServerMockRecorder) GetExchangeRates(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRates", reflect.TypeOf((*MockExchangeServiceServer)(nil).GetExchangeRates), arg0, arg1)
}

// mustEmbedUnimplementedExchangeServiceServer mocks base method.
func (m *MockExchangeServiceServer) mustEmbedUnimplementedExchangeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExchangeServiceServer")
}

// mustEmbedUnimplementedExchangeServiceServer indicates an expected call of mustEmbedUnimplementedExchangeServiceServer.
func (mr *MockExchangeServiceServerMockRecorder) mustEmbedUnimplementedExchangeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExchangeServiceServer", reflect.TypeOf((*MockExchangeServiceServer)(nil).mustEmbedUnimplementedExchangeServiceServer))
}

// MockUnsafeExchangeServiceServer is a mock of UnsafeExchangeServiceServer interface.
type MockUnsafeExchangeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeExchangeServiceServerMockRecorder
}

// MockUnsafeExchangeServiceServerMockRecorder is the mock recorder for MockUnsafeExchangeServiceServer.
type MockUnsafeExchangeServiceServerMockRecorder struct {
	mock *MockUnsafeExchangeServiceServer
}

// NewMockUnsafeExchangeServiceServer creates a new mock instance.
func NewMockUnsafeExchangeServiceServer(ctrl *gomock.Controller) *MockUnsafeExchangeServiceServer {
	mock := &MockUnsafeExchangeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeExchangeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeExchangeServiceServer) EXPECT() *MockUnsafeExchangeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedExchangeServiceServer mocks base method.
func (m *MockUnsafeExchangeServiceServer) mustEmbedUnimplementedExchangeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedExchangeServiceServer")
}

// mustEmbedUnimplementedExchangeServiceServer indicates an expected call of mustEmbedUnimplementedExchangeServiceServer.
func (mr *MockUnsafeExchangeServiceServerMockRecorder) mustEmbedUnimplementedExchangeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedExchangeServiceServer", reflect.TypeOf((*MockUnsafeExchangeServiceServer)(nil).mustEmbedUnimplementedExchangeServiceServer))
}
